name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  # Job 1: Install dependencies and cache
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: echo "key=pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Job 2: Lint and type check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript type check
        run: pnpm run type-check

  # Job 3: Build packages
  build-packages:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build:packages

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-packages-${{ github.sha }}

  # Job 4: Build and test applications
  build-and-test-apps:
    runs-on: ubuntu-latest
    needs: [setup, build-packages]
    strategy:
      matrix:
        app: [business, education, portfolio]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            pnpm-

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: build-packages-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.app }} app
        run: pnpm run build --filter=@learner-files/${{ matrix.app }}
        env:
          NODE_ENV: production

      - name: Run tests for ${{ matrix.app }} app
        run: pnpm run test --filter=@learner-files/${{ matrix.app }}
        continue-on-error: true

      - name: Cache app build
        uses: actions/cache@v3
        with:
          path: |
            apps/${{ matrix.app }}/.next
            apps/${{ matrix.app }}/dist
            apps/${{ matrix.app }}/build
          key: build-${{ matrix.app }}-${{ github.sha }}

  # Job 5: Security audit
  security-audit:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

  # Job 6: Deploy to staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-and-test-apps, security-audit]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore all build artifacts
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/build
            apps/*/.next
            apps/*/dist
            apps/*/build
          key: build-*-${{ github.sha }}
          restore-keys: |
            build-packages-${{ github.sha }}
            build-business-${{ github.sha }}
            build-education-${{ github.sha }}
            build-portfolio-${{ github.sha }}

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 7: Deploy to production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-and-test-apps, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore all build artifacts
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/build
            apps/*/.next
            apps/*/dist
            apps/*/build
          key: build-*-${{ github.sha }}
          restore-keys: |
            build-packages-${{ github.sha }}
            build-business-${{ github.sha }}
            build-education-${{ github.sha }}
            build-portfolio-${{ github.sha }}

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 8: Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful"
          elif [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Deployment failed or skipped"
          fi